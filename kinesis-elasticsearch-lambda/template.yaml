AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  kinesis-elasticsearch-lambda

  Sample SAM Template for kinesis-elasticsearch-lambda

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60
Parameters:
  KinesisStreamName:
    Type: String
  ESDomainName:
    Type: String
  ElasticsearchVersion:
    Description: User defined Elasticsearch Version
    Type: String
Resources:
  EsInserter:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables: 
          StreamName: !Ref KinesisStreamName

      CodeUri: esInserter/
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
        Statement:
          - Effect: Allow
            Action: 
              - 'kinesis:*'
            Resource: '*'

  KinesisHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables: 
          esEndpoint: !GetAtt ElasticSearchDomain.DomainEndpoint 

      CodeUri: kinesisHandler/
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
        Statement:
          - Effect: Allow
            Action: 
              - 'es:*'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DescribeInstances'
              - 'ec2:AttachNetworkInterface'

            Resource: '*'
      VpcConfig:
        SubnetIds:
          - Ref: subnet
        SecurityGroupIds:
          - Ref: mySecurityGroup


          
      Events:
        KinesisPipe:
          Type: Kinesis # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Stream: !GetAtt KinesisPipe.Arn
            BatchSize: 100
            StartingPosition: LATEST
  KinesisPipe:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Ref KinesisStreamName
      RetentionPeriodHours: 24
      ShardCount: 1
  ElasticSearchDomain:
    Type: AWS::Elasticsearch::Domain
    DependsOn: ServiceLinkedRole
    Properties:
      DomainName: 
        Ref: ESDomainName
      ElasticsearchVersion:
        Ref: ElasticsearchVersion
      ElasticsearchClusterConfig:
        InstanceCount: 1
        InstanceType: "m4.xlarge.elasticsearch"
      EBSOptions:
        EBSEnabled: 'true'
        Iops: 0
        VolumeSize: 10
        VolumeType: standard
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource:
              !Join
                - ''
                - - 'arn'
                  - ':aws:es:'
                  - !Ref AWS::Region
                  - ':'
                  - !Ref AWS::AccountId
                  - ':domain/'
                  - !Ref ESDomainName
                  - '/test/*'


      SnapshotOptions:       
        AutomatedSnapshotStartHour: 17
      NodeToNodeEncryptionOptions:
        Enabled: "true"
      AdvancedSecurityOptions:
        Enabled: "true"
        InternalUserDatabaseEnabled: "true"
        MasterUserOptions:
          MasterUserName: 'interpark'
          MasterUserPassword: 'Interpark1!'

#      VPCOptions:
#        SubnetIds:
#          - Ref: PublicSubnet1
#        SecurityGroupIds:
#          - !GetAtt mySecurityGroup.GroupId
  vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: vpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-northeast-2a
  subnetb:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: vpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-northeast-2c
  mySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: es sg
      VpcId: !Ref vpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: ap-northeast-2a
      CidrBlock: 10.0.3.0/24
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: ap-northeast-2c
      CidrBlock: 10.0.4.0/24
  InstanceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt mySecurityGroup.GroupId
      Description: ingress
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0

#  InstanceSecurityGroupIngress:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      Description: ingress
#      IpProtocol: -1
#      GroupId: !GetAtt mySecurityGroup.GroupId
#      SourceSecurityGroupId: !GetAtt mySecurityGroup.GroupId

  ServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties: 
      AWSServiceName: es.amazonaws.com

  InternetGateWay:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: DNA-IGW
  InternetGateWayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateWay
      VpcId: !Ref vpc
  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGateWay
    Properties:
      Tags:
        - Key: Name
          Value: DNA-ROUTE-TABLE
      VpcId: !Ref vpc
  Route:
    Type: AWS::EC2::Route
    DependsOn: RouteTable
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateWay
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet2
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  KinesisName:
    Description: "Kinesis Stream Name"
    Value: !Ref KinesisStreamName
  KinesisArn:
    Description: "Kinesis Stream"
    Value: !Ref KinesisPipe
  KinesisHandlerArn:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !Ref KinesisHandler
        
